{"version":3,"sources":["components/Header/index.tsx","components/Tictactoe/Td.tsx","components/Tictactoe/Tr.tsx","components/Tictactoe/Table.tsx","components/Tictactoe/index.tsx","components/Googoodan/index.tsx","components/Main.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","Td","rowIndex","cellIndex","dispatch","cellData","onClickTd","useCallback","console","log","clickCell","changeTurn","onClick","Tr","rowData","map","item","i","key","Table","tableData","initialState","winner","turn","row","cell","type","reducer","state","action","payload","Tictactoe","useReducer","onClickTable","Googoodan","Main","path","component","expact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3e3f439.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <header className=\"App-header\">\r\n          <div className=\"title\">게임맨</div>\r\n          <nav>\r\n            <ul className=\"nav-list\">\r\n              <li><Link to='/tictactoe'>틱텍토</Link></li>\r\n              <li><Link to='/googoodan'>구구단</Link></li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useCallback } from 'react';\r\nimport {clickCell, changeTurn} from './index'\r\n\r\nexport interface ITd {\r\n    rowIndex: number\r\n    cellIndex: number\r\n    dispatch: (obj:any) => void\r\n    cellData: string\r\n}\r\n\r\nconst Td = ({rowIndex, cellIndex, dispatch, cellData }: ITd) => {\r\n\r\n    const onClickTd = useCallback ( () => {\r\n        console.log('onClickTd', cellData);\r\n        if (cellData) {\r\n            return;\r\n        }\r\n        \r\n        dispatch(clickCell(rowIndex,cellIndex));\r\n        dispatch(changeTurn());\r\n\r\n    }, [cellData])\r\n\r\n    return (\r\n        <td onClick={onClickTd}>{cellData}</td>\r\n    )\r\n}\r\n\r\nexport default Td","import React, { Dispatch } from 'react';\r\nimport { IAction }from './index';\r\nimport Td from './Td';\r\n\r\ninterface ITr {\r\n    rowIndex: number\r\n    rowData: string[]\r\n    dispatch: Dispatch<IAction>\r\n}\r\nconst Tr = ({rowIndex, rowData, dispatch}:ITr) => {\r\n\r\n    return (\r\n        <tr>\r\n            {\r\n                rowData.map((item, i) => <Td key={i} rowIndex={rowIndex} cellIndex={i} dispatch={dispatch} cellData={item}/>)\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Tr;","import React, { Dispatch } from 'react';\r\nimport { IAction }from './index';\r\nimport Tr from './Tr';\r\n\r\ninterface ITable {\r\n    onClick: () => void\r\n    tableData: string[][]\r\n    dispatch: Dispatch<IAction>\r\n}\r\nconst Table = ({onClick, tableData, dispatch}:ITable) => {\r\n\r\n    return (\r\n        <table onClick={onClick}>\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    tableData.map((item, i) => <Tr key={i} rowIndex={i} rowData={item} dispatch={dispatch} />)\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useReducer, useCallback } from 'react';\r\nimport Table from './Table';\r\n\r\ntype IInitState = {\r\n    winner: string;\r\n    turn: string;\r\n    tableData: string[][]\r\n}\r\nconst initialState:IInitState = {\r\n    winner: '',\r\n    turn: 'O',\r\n    tableData: [\r\n        ['', '', '',],\r\n        ['', '', '',],\r\n        ['', '', '',]\r\n    ]\r\n}\r\nexport const SET_WINNER = 'SET_WINNER' as const;\r\nexport const CLICK_CELL = 'CLICK_CELL' as const;\r\nexport const CHANGE_TURN = 'CHANGE_TURN' as const;\r\n\r\nexport const setWinner = () => {\r\n    return {\r\n        type:SET_WINNER,\r\n        payload: '0'\r\n    }\r\n}\r\n\r\nexport const clickCell = (row:number, cell:number) => {\r\n    return {\r\n        type: CLICK_CELL,\r\n        row: row,\r\n        cell: cell\r\n    }\r\n}\r\n\r\nexport const changeTurn = () => {\r\n    return {\r\n        type: CHANGE_TURN\r\n    }\r\n}\r\n\r\nexport type IAction = \r\n    ReturnType<typeof setWinner> |\r\n    ReturnType<typeof clickCell> |\r\n    ReturnType<typeof changeTurn>\r\n;\r\n\r\nconst reducer = (state: IInitState, action: IAction) => {\r\n    \r\n    switch(action.type) {\r\n        case SET_WINNER:\r\n            return {\r\n                ...state,\r\n                winner: action.payload\r\n            }\r\n        case CLICK_CELL:\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...tableData[action.row]]\r\n            tableData[action.row][action.cell] = state.turn\r\n            return {\r\n                ...state,\r\n                tableData\r\n            }\r\n        case CHANGE_TURN:\r\n            return {\r\n                ...state,\r\n                turn: state.turn === 'O' ? \"X\" : \"O\"\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst Tictactoe = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const onClickTable = useCallback(()=> {\r\n        dispatch({type:SET_WINNER, payload: '0'})\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"TicTacToe\">\r\n            <Table onClick={onClickTable} tableData={state.tableData} dispatch={dispatch} />\r\n            {state.winner} 의 승리\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tictactoe;","import React from 'react';\r\n\r\nconst Googoodan = () => {\r\n\r\n    return(\r\n        <div>\r\n            구구단 이다\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Googoodan;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Tictactoe from './Tictactoe';\r\nimport Googoodan from './Googoodan';\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <main className=\"App-main\">\r\n          <Switch>\r\n            <Route path=\"/tictactoe\" component={Tictactoe}></Route>\r\n            <Route path=\"/googoodan\" component={Googoodan}></Route>\r\n            <Route expact path=\"/\" component={Tictactoe}></Route>\r\n          </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Header from 'components/Header';\r\nimport Main from 'components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Main />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'style/index.scss';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}