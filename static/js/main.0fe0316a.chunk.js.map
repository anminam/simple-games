{"version":3,"sources":["components/Header/index.tsx","components/Tictactoe/Td.tsx","components/Tictactoe/Tr.tsx","components/Tictactoe/Table.tsx","components/Tictactoe/index.tsx","components/Googoodan/index.tsx","components/Main.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","Td","rowIndex","cellIndex","dispatch","cellData","onClickTd","useCallback","console","log","clickCell","changeTurn","onClick","Tr","rowData","map","item","i","key","Table","tableData","initialState","winner","turn","row","cell","type","reducer","state","action","payload","Tictactoe","useReducer","onClickTable","Googoodan","Main","path","component","expact","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0fe0316a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n\n    return(\n        <header className=\"App-header\">\n          <div className=\"title\">게임맨</div>\n          <nav>\n            <ul className=\"nav-list\">\n              <li><Link to='/tictactoe'>틱텍토</Link></li>\n              <li><Link to='/googoodan'>구구단</Link></li>\n            </ul>\n          </nav>\n        </header>\n    )\n}\n\nexport default Header;","import React, { useCallback } from 'react';\nimport {clickCell, changeTurn} from './index'\n\nexport interface ITd {\n    rowIndex: number\n    cellIndex: number\n    dispatch: (obj:any) => void\n    cellData: string\n}\n\nconst Td = ({rowIndex, cellIndex, dispatch, cellData }: ITd) => {\n\n    const onClickTd = useCallback ( () => {\n        console.log('onClickTd', cellData);\n        if (cellData) {\n            return;\n        }\n        \n        dispatch(clickCell(rowIndex,cellIndex));\n        dispatch(changeTurn());\n\n    }, [cellData])\n\n    return (\n        <td onClick={onClickTd}>{cellData}</td>\n    )\n}\n\nexport default Td","import React, { Dispatch } from 'react';\nimport { IAction }from './index';\nimport Td from './Td';\n\ninterface ITr {\n    rowIndex: number\n    rowData: string[]\n    dispatch: Dispatch<IAction>\n}\nconst Tr = ({rowIndex, rowData, dispatch}:ITr) => {\n\n    return (\n        <tr>\n            {\n                rowData.map((item, i) => <Td key={i} rowIndex={rowIndex} cellIndex={i} dispatch={dispatch} cellData={item}/>)\n            }\n        </tr>\n    )\n}\n\nexport default Tr;","import React, { Dispatch } from 'react';\nimport { IAction }from './index';\nimport Tr from './Tr';\n\ninterface ITable {\n    onClick: () => void\n    tableData: string[][]\n    dispatch: Dispatch<IAction>\n}\nconst Table = ({onClick, tableData, dispatch}:ITable) => {\n\n    return (\n        <table onClick={onClick}>\n            <thead>\n\n            </thead>\n            <tbody>\n                {\n                    tableData.map((item, i) => <Tr key={i} rowIndex={i} rowData={item} dispatch={dispatch} />)\n                }\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table;","import React, { useReducer, useCallback } from 'react';\nimport Table from './Table';\n\ntype IInitState = {\n    winner: string;\n    turn: string;\n    tableData: string[][]\n}\nconst initialState:IInitState = {\n    winner: '',\n    turn: 'O',\n    tableData: [\n        ['', '', '',],\n        ['', '', '',],\n        ['', '', '',]\n    ]\n}\nexport const SET_WINNER = 'SET_WINNER' as const;\nexport const CLICK_CELL = 'CLICK_CELL' as const;\nexport const CHANGE_TURN = 'CHANGE_TURN' as const;\n\nexport const setWinner = () => {\n    return {\n        type:SET_WINNER,\n        payload: '0'\n    }\n}\n\nexport const clickCell = (row:number, cell:number) => {\n    return {\n        type: CLICK_CELL,\n        row: row,\n        cell: cell\n    }\n}\n\nexport const changeTurn = () => {\n    return {\n        type: CHANGE_TURN\n    }\n}\n\nexport type IAction = \n    ReturnType<typeof setWinner> |\n    ReturnType<typeof clickCell> |\n    ReturnType<typeof changeTurn>\n;\n\nconst reducer = (state: IInitState, action: IAction) => {\n    \n    switch(action.type) {\n        case SET_WINNER:\n            return {\n                ...state,\n                winner: action.payload\n            }\n        case CLICK_CELL:\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...tableData[action.row]]\n            tableData[action.row][action.cell] = state.turn\n            return {\n                ...state,\n                tableData\n            }\n        case CHANGE_TURN:\n            return {\n                ...state,\n                turn: state.turn === 'O' ? \"X\" : \"O\"\n            }\n        default:\n            return state;\n    }\n}\nconst Tictactoe = () => {\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const onClickTable = useCallback(()=> {\n        dispatch({type:SET_WINNER, payload: '0'})\n    },[]);\n\n    return(\n        <div className=\"TicTacToe\">\n            <Table onClick={onClickTable} tableData={state.tableData} dispatch={dispatch} />\n            {state.winner} 의 승리\n        </div>\n    )\n}\n\nexport default Tictactoe;","import React from 'react';\n\nconst Googoodan = () => {\n\n    return(\n        <div>\n            구구단 이다\n        </div>\n    )\n}\n\nexport default Googoodan;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Tictactoe from './Tictactoe';\nimport Googoodan from './Googoodan';\n\nconst Main = () => {\n\n    return (\n        <main className=\"App-main\">\n          <Switch>\n            <Route path=\"/tictactoe\" component={Tictactoe}></Route>\n            <Route path=\"/googoodan\" component={Googoodan}></Route>\n            <Route expact path=\"/\" component={Tictactoe}></Route>\n          </Switch>\n        </main>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Header from 'components/Header';\nimport Main from 'components/Main';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'style/index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}