{"version":3,"sources":["components/Mine/index.tsx","components/Header/index.tsx","components/Tictactoe/Td.tsx","components/Tictactoe/Tr.tsx","components/Tictactoe/Table.tsx","components/Tictactoe/index.tsx","components/Googoodan/index.tsx","components/Mine/Td.tsx","components/Mine/Tr.tsx","components/Mine/Table.tsx","components/Mine/Form.tsx","components/Main.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CODE","Header","className","to","Td","memo","rowIndex","cellIndex","dispatch","cellData","console","log","ref","useRef","useEffect","current","onClickTd","useCallback","clickCell","onClick","Tr","rowData","map","item","i","key","Table","tableData","initialState","winner","turn","recentCell","row","cell","type","reducer","state","action","payload","Tictactoe","useReducer","win","all","forEach","Googoodan","getTdStyle","code","NORMAL","MINE","background","OPENED","FLAG_MINE","FLAG","QUESTION_MINE","QUESTION","useContext","TableContext","halted","onClickCell","openCell","clickMine","onRightClick","e","preventDefault","normalCell","flagCell","questionCell","style","onContextMenu","CLICKED_MINE","getTdText","items","Form","useState","setRow","setCell","mine","setMine","onChangeRow","target","value","onChangeCell","onChangeMine","onClickButon","startGame","placeholder","onChange","planMine","candidate","Array","fill","shuffle","length","chosen","splice","Math","floor","random","push","data","j","k","ver","hor","timer","result","obj","around","concat","count","filter","v","includes","createContext","Mine","useMemo","Provider","Main","path","component","expact","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uLAIYA,E,gDCeGC,EAhBA,WAEX,OACI,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,SAAf,sBACA,6BACE,wBAAIA,UAAU,YACZ,4BAAI,kBAAC,IAAD,CAAMC,GAAG,cAAT,uBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,uBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,iC,4BCwBHC,EA1BJC,gBAAK,YAAqD,IAAnDC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,SAC7CC,QAAQC,IAAI,MAEZ,IAAMC,EAAMC,iBAAY,IACxBC,qBAAU,WACNJ,QAAQC,IAAI,CAACL,IAAaM,EAAIG,QAAQ,GAAIR,IAAcK,EAAIG,QAAQ,GAAIP,IAAaI,EAAIG,QAAQ,GAAIN,IAAaG,EAAIG,QAAQ,KAC9HL,QAAQC,IAAIF,GACZG,EAAIG,QAAU,CAACT,EAAUC,EAAWC,EAAUC,KAEhD,CAACH,EAAUC,EAAWC,EAAUC,IAElC,IAAMO,EAAYC,uBAAc,WAC5BP,QAAQC,IAAI,YAAaF,GACrBA,GAIJD,EAASU,EAAUZ,EAAUC,MAE9B,CAACE,IAEJ,OACI,wBAAIU,QAASH,GAAYP,MCJlBW,EAnBJf,gBAAK,YAAwC,IAAtCC,EAAqC,EAArCA,SAAUe,EAA2B,EAA3BA,QAASb,EAAkB,EAAlBA,SACjCE,QAAQC,IAAI,aAEZ,IAAMC,EAAMC,iBAAY,IAOxB,OANAC,qBAAU,WACNJ,QAAQC,IAAI,CAACL,IAAaM,EAAIG,QAAQ,GAAIM,IAAYT,EAAIG,QAAQ,GAAIP,IAAaI,EAAIG,QAAQ,KAE/FH,EAAIG,QAAU,CAACT,EAAUe,EAASb,KAEpC,CAACF,EAAUe,EAASb,IAElB,4BAEQa,EAAQC,KAAI,SAACC,EAAMC,GAAP,OAAY,kBAAC,EAAD,CAAIC,IAAKD,EAAGlB,SAAUA,EAAUC,UAAWiB,EAAGhB,SAAUA,EAAUC,SAAUc,WCGrGG,EAhBDrB,gBAAK,YAA2C,EAAzCc,QAA0C,IAAjCQ,EAAgC,EAAhCA,UAAWnB,EAAqB,EAArBA,SAErC,OACI,+BACI,gCAGA,+BAEQmB,EAAUL,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAIC,IAAKD,EAAGlB,SAAUkB,EAAGH,QAASE,EAAMf,SAAUA,YCT3FoB,EAA0B,CAC5BC,OAAQ,GACRC,KAAM,IACNH,UAAW,CACP,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEbI,WAAY,EAAE,GAAI,IAcTb,EAAY,SAACc,EAAYC,GAClC,MAAO,CACHC,KAbkB,aAclBF,IAAKA,EACLC,KAAMA,IAuBRE,EAAU,SAACC,EAAmBC,GAEhC,OAAOA,EAAOH,MACV,IA1CkB,aA2Cd,OAAO,eACAE,EADP,CAEIP,OAAQQ,EAAOC,UAEvB,IA9CkB,aA+Cd,IAAMX,EAAS,YAAOS,EAAMT,WAG5B,OAFAA,EAAUU,EAAOL,KAAjB,YAA4BL,EAAUU,EAAOL,MAC7CL,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQG,EAAMN,KACpC,eACAM,EADP,CAEIT,YACAI,WAAY,CAACM,EAAOL,IAAKK,EAAOJ,QAExC,IAtDmB,cAuDf,OAAO,eACAG,EADP,CAEIN,KAAqB,MAAfM,EAAMN,KAAe,IAAM,MAEzC,IA1DkB,aA2Dd,OAAO,eACAM,EADP,CAEIN,KAAM,IACNH,UAAW,CACP,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,KAEbI,WAAY,EAAE,GAAI,KAE1B,QACI,OAAOK,IA6DJG,EA1DG,WAAO,IAAD,EAEMC,qBAAWL,EAASP,GAF1B,mBAEbQ,EAFa,KAEN5B,EAFM,KAGbmB,EAAuCS,EAAvCT,UAAWE,EAA4BO,EAA5BP,OAAQE,EAAoBK,EAApBL,WAAYD,EAAQM,EAARN,KA+CtC,OA7CAhB,qBAAU,WACN,IAAI2B,GAAM,EADE,cAEQV,EAFR,GAELC,EAFK,KAEAC,EAFA,KAGZ,KAAID,EAAM,GAgBV,GAbIL,EAAUK,GAAK,KAAOF,GAAOH,EAAUK,GAAK,KAAOF,GAAQH,EAAUK,GAAK,KAAOF,IACjFW,GAAM,GAENd,EAAU,GAAGM,KAAUH,GAAOH,EAAU,GAAGM,KAAUH,GAAQH,EAAU,GAAGM,KAAUH,IACpFW,GAAM,GAENd,EAAU,GAAG,KAAOG,GAAOH,EAAU,GAAG,KAAOG,GAAQH,EAAU,GAAG,KAAOG,IAC3EW,GAAM,GAENd,EAAU,GAAG,KAAOG,GAAOH,EAAU,GAAG,KAAOG,GAAQH,EAAU,GAAG,KAAOG,IAC3EW,GAAM,GAGNA,EACAjC,EA/FD,CACH0B,KAPkB,aAQlBI,QA6FuBR,IACnBtB,EA3ED,CACH0B,KAzBkB,mBAoGX,CACH,IAAIQ,GAAM,EACVf,EAAUgB,SAAQ,SAAAX,GACdA,EAAIW,SAAS,SAAAV,GACHA,IACFS,GAAM,SAMdlC,EADAkC,EAtFL,CACHR,KAzBkB,cAkBf,CACHA,KApBmB,mBAsHrB,CAACH,IAOC,yBAAK7B,UAAU,aACX,kBAAC,EAAD,CAAOiB,QAAS,aAAQQ,UAAWA,EAAWnB,SAAUA,IACvDqB,EAFL,yBCvIOe,EATG,WAEd,OACI,iECIFC,EAAa,SAACC,GAChB,OAAOA,GACH,KAAK9C,EAAK+C,OACV,KAAK/C,EAAKgD,KACN,MAAO,CACHC,WAAY,QAEpB,KAAKjD,EAAKkD,OACN,MAAO,CACHD,WAAY,SAEpB,KAAKjD,EAAKmD,UACV,KAAKnD,EAAKoD,KACN,MAAO,CACHH,WAAY,OAEpB,KAAKjD,EAAKqD,cACV,KAAKrD,EAAKsD,SACN,MAAO,CACHL,WAAY,QAEpB,QACI,MAAO,CACHA,WAAY,WAkFb7C,EA3DJ,SAAC,GAAuC,IAArCmB,EAAoC,EAApCA,KAAMjB,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,UAAoB,EAEjBgD,qBAAWC,GAAhChD,EAFsC,EAEtCA,SAAUiD,EAF4B,EAE5BA,OAGZC,EAAczC,uBAAY,WAC5B,IAAIwC,EAGJ,OAAOlC,GACH,KAAKvB,EAAK+C,OAEN,YADAvC,EAASmD,EAASrD,EAAUC,IAEhC,KAAKP,EAAKgD,KAEN,YADAxC,EAASoD,EAAUtD,EAAUC,IAEjC,QACI,UAGT,CAACgB,EAAMkC,IAEJI,EAAe5C,uBAAY,SAAC6C,GAE9B,GADAA,EAAEC,kBACEN,EAIJ,OAAOlC,GACH,KAAKvB,EAAK+C,OACV,KAAK/C,EAAKgD,KAEN,YADAxC,EAASwD,EAAW1D,EAASC,IAEjC,KAAKP,EAAKoD,KACV,KAAKpD,EAAKmD,UAEN,YADA3C,EAASyD,EAAS3D,EAASC,IAE/B,KAAKP,EAAKsD,SACV,KAAKtD,EAAKqD,cAEN,YADA7C,EAAS0D,EAAa5D,EAASC,IAEnC,QACI,UAGT,CAACgB,EAAMkC,IAEV,OACI,wBACIU,MAAOtB,EAAWtB,GAClBrB,UAAU,KACViB,QAASuC,EACTU,cAAeP,GAtET,SAACf,GACf,OAAOA,GACH,KAAK9C,EAAK+C,OACN,MAAO,GACX,KAAK/C,EAAKgD,KACN,MAAO,IACX,KAAKhD,EAAKqE,aACN,MAAO,SACX,KAAKrE,EAAKmD,UACV,KAAKnD,EAAKoD,KACN,MAAO,IACX,KAAKpD,EAAKqD,cACV,KAAKrD,EAAKsD,SACN,MAAO,IACX,QACI,OAAOR,GAAQ,IAyDdwB,CAAU/C,KCzFRH,EAZJ,SAAC,GAA8B,IAA5BmD,EAA2B,EAA3BA,MAAOjE,EAAoB,EAApBA,SACGiD,qBAAWC,GAAxB7B,UAEP,OACI,wBAAIzB,UAAU,MAENqE,EAAMjD,KAAI,SAACC,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAIC,IAAKD,EAAGD,KAAMA,EAAMjB,SAAUA,EAAUC,UAAWiB,SCO/EE,EAjBD,WAAO,IAETC,EAAc4B,qBAAWC,GAAzB7B,UACR,OACI,yBAAKzB,UAAU,SACX,+BACI,gCACA,+BAEQyB,EAAUL,KAAI,SAACC,EAAMC,GAAP,OAAe,kBAAC,EAAD,CAAIC,IAAKD,EAAG+C,MAAOhD,EAAMjB,SAAUkB,WC8BzEgD,EAxCF,WAAO,IAAD,EAEOC,oBAAkB,GAFzB,mBAERzC,EAFQ,KAEH0C,EAFG,OAGSD,oBAAkB,GAH3B,mBAGRxC,EAHQ,KAGF0C,EAHE,OAISF,oBAAkB,GAJ3B,mBAIRG,EAJQ,KAIFC,EAJE,KAKPrE,EAAa+C,qBAAWC,GAAxBhD,SAEFsE,EAAc7D,uBAAa,SAAC6C,GAC9BY,EAAOZ,EAAEiB,OAAOC,SACjB,IACGC,EAAehE,uBAAa,SAAC6C,GAC/Ba,EAAQb,EAAEiB,OAAOC,SAClB,IACGE,EAAejE,uBAAa,SAAC6C,GAC/Be,EAAQf,EAAEiB,OAAOC,SAClB,IACGG,EAAelE,uBAAY,WAC7BT,EAAS4E,EAAU,CAACpD,MAAIC,OAAK2C,YAC9B,CAAC5C,EAAKC,EAAM2C,IAWf,OATA9D,qBAAU,WACN4D,EAAO,IACPC,EAAQ,IACRE,EAAQ,IACRrE,EAAS4E,EAAU,CAACpD,MAAIC,OAAK2C,YAC9B,IAKC,yBAAK1E,UAAU,QACX,2BAAOgC,KAAK,SAASmD,YAAY,eAAKL,MAAOhD,EAAKsD,SAAUR,IAC5D,2BAAO5C,KAAK,SAASmD,YAAY,eAAKL,MAAO/C,EAAMqD,SAAUL,IAC7D,2BAAO/C,KAAK,SAASmD,YAAY,eAAKL,MAAOJ,EAAMU,SAAUJ,IAC7D,4BAAQhD,KAAK,SAASf,QAASgE,GAA/B,mB,SVjCAnF,O,iBAAAA,I,oBAAAA,I,wBAAAA,I,gBAAAA,I,kCAAAA,I,0BAAAA,I,gCAAAA,I,qBAAAA,M,KAiBZ,IAAMuF,EAAW,SAAC,GAGhB,IAH8D,IAA7CvD,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,KAAM2C,EAAiC,EAAjCA,KACtBY,EAAYC,MAAMzD,EAAMC,GAAMyD,KAAK,IAAIpE,KAAI,SAACC,EAAMC,GAAP,OAAaA,KACxDmE,EAAU,GACVH,EAAUI,OAAS5D,EAAMC,EAAO2C,GAAM,CAC1C,IAAMiB,EAASL,EAAUM,OAAOC,KAAKC,MAAMD,KAAKE,SAAWT,EAAUI,QAAS,GAAG,GACjFD,EAAQO,KAAKL,GAIf,IADA,IAAMM,EAAO,GACJ3E,EAAG,EAAGA,EAAGQ,EAAKR,IAAI,CACzB,IAAMH,EAAmB,GACzB8E,EAAKD,KAAK7E,GACV,IAAK,IAAI+E,EAAI,EAAGA,EAAIpE,EAAKoE,IACvB/E,EAAQ6E,KAAKlG,EAAK+C,QAItB,IAAK,IAAIsD,EAAI,EAAGA,EAAIV,EAAQC,OAAQS,IAAK,CACvC,IAAMC,EAAMP,KAAKC,MAAML,EAAQU,GAAKpE,GAC9BsE,EAAMZ,EAAQU,GAAKpE,EACzBkE,EAAKG,GAAKC,GAAOvG,EAAKgD,KAIxB,OADAtC,QAAQC,IAAIwF,GACLA,GAUHvE,EAAsB,CAC1BD,UAAW,CAAC,IACZ6E,MAAO,GACPC,OAAQ,GACRhD,QAAQ,GAUG2B,EAAY,SAAC,GAAD,MACvB,CACElD,KATsB,aAUtBF,IAHqB,EAAEA,IAIvBC,KAJqB,EAAOA,KAK5B2C,KALqB,EAAaA,OASzBhB,EAAY,SAAC5B,EAAYC,GACpC,MAAO,CACLC,KAjBsB,aAkBtBF,MACAC,SAIS0B,EAAW,SAAC3B,EAAYC,GACnC,MAAO,CACLC,KAvBqB,YAwBrBF,MACAC,SAGS+B,EAAa,SAAChC,EAAYC,GACrC,MAAO,CACLC,KA/BuB,cAgCvBF,MACAC,SAGSgC,EAAW,SAACjC,EAAYC,GACnC,MAAO,CACLC,KApCqB,YAqCrBF,MACAC,SAGSiC,EAAe,SAAClC,EAAYC,GACvC,MAAO,CACLC,KA1CyB,gBA2CzBF,MACAC,SAaEE,EAAU,SAACC,EAAcC,GAE7B,IAAIV,EAAY,KAChB,OAAQU,EAAOH,MACb,IAlEsB,aAmEpB,IAAMwE,EAAM,CACV1E,IAAKK,EAAOL,IACZC,KAAMI,EAAOJ,KACb2C,KAAMvC,EAAOuC,MAEf,OAAO,eACFxC,EADL,CAEET,UAAW4D,EAASmB,KAExB,IAzEqB,aA0EnB/E,EAAS,YAAOS,EAAMT,YACZU,EAAOL,KAAjB,YAA4BI,EAAMT,UAAUU,EAAOL,MAGnD,IAAI2E,EAAkB,GAElBhF,EAAUU,EAAOL,IAAI,KACvB2E,EAASA,EAAOC,OACdjF,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,KAAO,GACxCN,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,MACjCN,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,KAAO,KAI5C0E,EAASA,EAAOC,OACdjF,EAAUU,EAAOL,KAAKK,EAAOJ,KAAO,GACpCN,EAAUU,EAAOL,KAAKK,EAAOJ,KAAO,IAGlCN,EAAUU,EAAOL,IAAM,KACzB2E,EAASA,EAAOC,OACdjF,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,KAAO,GACxCN,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,MACjCN,EAAUU,EAAOL,IAAM,GAAGK,EAAOJ,KAAO,KAG5C,IAAM4E,EAAQF,EAAOG,QAAO,SAAAC,GAAC,MAAI,CAAC/G,EAAKgD,KAAMhD,EAAKmD,UAAWnD,EAAKqD,eAAe2D,SAASD,MAAInB,OAI9F,OAHAjE,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQ4E,EACrCnG,QAAQC,IAAIkG,GAEL,eACFzE,EADL,CAEET,cAEJ,IA9GsB,aAkHpB,OAHAA,EAAS,YAAOS,EAAMT,YACZU,EAAOL,KAAjB,YAA4BI,EAAMT,UAAUU,EAAOL,MACnDL,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKqE,aACnC,eACFjC,EADL,CAEET,YACA8B,QAAQ,IAGZ,IAvHuB,cA+HrB,OAPA9B,EAAS,YAAOS,EAAMT,YACZU,EAAOL,KAAjB,YAA4BI,EAAMT,UAAUU,EAAOL,MAChDL,EAAUU,EAAOL,KAAKK,EAAOJ,QAAUjC,EAAKgD,KAC7CrB,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKmD,UAE1CxB,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKoD,KAErC,eACFhB,EADL,CAEET,cAEJ,IAjIqB,YAyInB,OAPAA,EAAS,YAAOS,EAAMT,YACZU,EAAOL,KAAjB,YAA4BI,EAAMT,UAAUU,EAAOL,MAChDL,EAAUU,EAAOL,KAAKK,EAAOJ,QAAUjC,EAAKmD,UAC7CxB,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKqD,cAE1C1B,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKsD,SAErC,eACFlB,EADL,CAEET,cAEJ,IA5IyB,gBAoJvB,OAPAA,EAAS,YAAOS,EAAMT,YACZU,EAAOL,KAAjB,YAA4BI,EAAMT,UAAUU,EAAOL,MAChDL,EAAUU,EAAOL,KAAKK,EAAOJ,QAAUjC,EAAKqD,cAC7C1B,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAKgD,KAE1CrB,EAAUU,EAAOL,KAAKK,EAAOJ,MAAQjC,EAAK+C,OAErC,eACFX,EADL,CAEET,cAEJ,QACE,OAAOS,IAUAoB,EAAeyD,wBAA6B,CACvDtF,UAAW,CAAC,IACZnB,SAAU,aACViD,QAAQ,IA8BKyD,EA3BF,WAAO,IAAD,EACS1E,qBAAWL,EAASP,GAD7B,mBACVQ,EADU,KACH5B,EADG,KAGXwE,EAAQmC,mBAAS,iBAAO,CAC5BxF,UAAWS,EAAMT,UACjBnB,WACAiD,OAAQrB,EAAMqB,UACZ,CAACrB,EAAMT,YAEX,OACE,kBAAC6B,EAAa4D,SAAd,CAAuBpC,MAAOA,GAC5B,yBAAK9E,UAAU,QACb,kBAAC,EAAD,MACA,6BAAMkC,EAAMoE,OAEVpE,EAAMT,UAAUiE,OAAS,GACzB,kBAAC,EAAD,MAGF,6BAAMxD,EAAMoE,UW3OLa,EAdF,WAET,OACI,0BAAMnH,UAAU,YACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoH,KAAK,aAAaC,UAAWhF,IACpC,kBAAC,IAAD,CAAO+E,KAAK,aAAaC,UAAW3E,IACpC,kBAAC,IAAD,CAAO0E,KAAK,QAAQC,UAAWL,IAC/B,kBAAC,IAAD,CAAOM,QAAM,EAACF,KAAK,IAAIC,UAAWhF,OCE/BkF,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,iBAChB,yBAAKzH,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEY0H,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnI,QAAQmI,MAAMA,EAAMC,c","file":"static/js/main.af342e81.chunk.js","sourcesContent":["import React, { useReducer, createContext, useMemo } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\n\r\nexport enum CODE {\r\n  MINE = -10,\r\n  NORMAL,\r\n  QUESTION,\r\n  FLAG,\r\n  QUESTION_MINE,\r\n  FLAG_MINE,\r\n  CLICKED_MINE,\r\n  OPENED,\r\n}\r\n\r\nexport interface IStartMine {\r\n  row: number\r\n  cell: number\r\n  mine: number\r\n}\r\n\r\nconst planMine = ({row, cell, mine}: IStartMine):number[][] => {\r\n  const candidate = Array(row * cell).fill('').map((item, i) => i)\r\n  const shuffle = [];\r\n  while(candidate.length > row * cell - mine) {\r\n    const chosen = candidate.splice(Math.floor(Math.random() * candidate.length), 1)[0];\r\n    shuffle.push(chosen);\r\n  }\r\n\r\n  const data = [];\r\n  for (let i =0; i< row; i++){\r\n    const rowData:number[] = [];\r\n    data.push(rowData);\r\n    for (let j = 0; j < row; j++){\r\n      rowData.push(CODE.NORMAL)\r\n    }\r\n  }\r\n\r\n  for (let k = 0; k < shuffle.length; k++) {\r\n    const ver = Math.floor(shuffle[k] / cell);\r\n    const hor = shuffle[k] % cell;\r\n    data[ver][hor] = CODE.MINE;\r\n  }\r\n\r\n  console.log(data);\r\n  return data;\r\n}\r\n\r\ninterface IState {\r\n  tableData: number[][]\r\n  timer: string\r\n  result: string\r\n  halted: boolean\r\n\r\n}\r\nconst initialState:IState = {\r\n  tableData: [[]],\r\n  timer: '',\r\n  result: '',\r\n  halted: false\r\n}\r\n\r\nexport const START_GAME = 'START_GAME' as const;\r\nexport const CLICK_MINE = 'CLICK_MINE' as const;\r\nexport const NORMAL_CELL = 'NORMAL_CELL' as const;\r\nexport const OPEN_CELL = 'OPEN_CELL' as const;\r\nexport const FLAG_CELL = 'FLAG_CELL' as const;\r\nexport const QUESTION_CELL = 'QUESTION_CELL' as const;\r\n\r\nexport const startGame = ({row, cell, mine}: IStartMine) => (\r\n  {\r\n    type: START_GAME,\r\n    row,\r\n    cell,\r\n    mine\r\n  }\r\n)\r\n\r\nexport const clickMine = (row:number, cell:number) => {\r\n  return {\r\n    type: CLICK_MINE,\r\n    row,\r\n    cell\r\n  }\r\n}\r\n\r\nexport const openCell = (row:number, cell:number) => {\r\n  return {\r\n    type: OPEN_CELL,\r\n    row,\r\n    cell\r\n  }\r\n}\r\nexport const normalCell = (row:number, cell:number) => {\r\n  return {\r\n    type: NORMAL_CELL,\r\n    row,\r\n    cell\r\n  }\r\n}\r\nexport const flagCell = (row:number, cell:number) => {\r\n  return {\r\n    type: FLAG_CELL,\r\n    row,\r\n    cell\r\n  }\r\n}\r\nexport const questionCell = (row:number, cell:number) => {\r\n  return {\r\n    type: QUESTION_CELL,\r\n    row,\r\n    cell\r\n  }\r\n}\r\n\r\ntype IAction = \r\n  ReturnType<typeof startGame> |\r\n  ReturnType<typeof clickMine> |\r\n  ReturnType<typeof openCell> |\r\n  ReturnType<typeof normalCell> |\r\n  ReturnType<typeof flagCell> |\r\n  ReturnType<typeof questionCell>\r\n;\r\n\r\nconst reducer = (state:IState, action:IAction) => {\r\n\r\n  let tableData = null;\r\n  switch (action.type) {\r\n    case START_GAME:\r\n      const obj = {\r\n        row: action.row,\r\n        cell: action.cell,\r\n        mine: action.mine,\r\n      }\r\n      return {\r\n        ...state,\r\n        tableData: planMine(obj)\r\n      }\r\n    case OPEN_CELL:\r\n      tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      \r\n\r\n      let around:number[] = []\r\n\r\n      if (tableData[action.row-1]) {\r\n        around = around.concat(\r\n          tableData[action.row - 1][action.cell - 1],\r\n          tableData[action.row - 1][action.cell],\r\n          tableData[action.row - 1][action.cell + 1],\r\n        )\r\n      }\r\n\r\n      around = around.concat(\r\n        tableData[action.row][action.cell - 1],\r\n        tableData[action.row][action.cell + 1]\r\n      )\r\n\r\n      if (tableData[action.row + 1]) {\r\n        around = around.concat(\r\n          tableData[action.row + 1][action.cell - 1],\r\n          tableData[action.row + 1][action.cell],\r\n          tableData[action.row + 1][action.cell + 1],\r\n        )\r\n      }\r\n      const count = around.filter(v => [CODE.MINE, CODE.FLAG_MINE, CODE.QUESTION_MINE].includes(v)).length;\r\n      tableData[action.row][action.cell] = count;\r\n      console.log(count);\r\n\r\n      return {\r\n        ...state,\r\n        tableData\r\n      }\r\n    case CLICK_MINE:\r\n      tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      tableData[action.row][action.cell] = CODE.CLICKED_MINE\r\n      return {\r\n        ...state,\r\n        tableData,\r\n        halted: true\r\n      }\r\n\r\n    case NORMAL_CELL:\r\n      tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      if(tableData[action.row][action.cell] === CODE.MINE) {\r\n        tableData[action.row][action.cell] = CODE.FLAG_MINE\r\n      } else {\r\n        tableData[action.row][action.cell] = CODE.FLAG;\r\n      }\r\n      return {\r\n        ...state,\r\n        tableData\r\n      }\r\n    case FLAG_CELL:\r\n      tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      if(tableData[action.row][action.cell] === CODE.FLAG_MINE) {\r\n        tableData[action.row][action.cell] = CODE.QUESTION_MINE\r\n      } else {\r\n        tableData[action.row][action.cell] = CODE.QUESTION;\r\n      }\r\n      return {\r\n        ...state,\r\n        tableData\r\n      }\r\n    case QUESTION_CELL:\r\n      tableData = [...state.tableData];\r\n      tableData[action.row] = [...state.tableData[action.row]];\r\n      if(tableData[action.row][action.cell] === CODE.QUESTION_MINE) {\r\n        tableData[action.row][action.cell] = CODE.MINE\r\n      } else {\r\n        tableData[action.row][action.cell] = CODE.NORMAL;\r\n      }\r\n      return {\r\n        ...state,\r\n        tableData\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport interface ITableContext {\r\n  tableData: number[][]\r\n  dispatch: React.Dispatch<IAction>,\r\n  halted: boolean\r\n}\r\n\r\nexport const TableContext = createContext<ITableContext>({\r\n  tableData: [[]],\r\n  dispatch: () => {},\r\n  halted: false\r\n})\r\n\r\nconst Mine = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  const value = useMemo( () => ({\r\n    tableData: state.tableData,\r\n    dispatch,\r\n    halted: state.halted\r\n  }), [state.tableData])\r\n\r\n  return(\r\n    <TableContext.Provider value={value}>\r\n      <div className=\"Mine\">\r\n        <Form />\r\n        <div>{state.timer}</div>\r\n        {\r\n          state.tableData.length > 0 &&\r\n          <Table />\r\n        }\r\n        \r\n        <div>{state.timer}</div>\r\n\r\n\r\n      </div>\r\n    </TableContext.Provider>\r\n  )\r\n}\r\n\r\nexport default Mine;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <header className=\"App-header\">\r\n          <div className=\"title\">게임맨</div>\r\n          <nav>\r\n            <ul className=\"nav-list\">\r\n              <li><Link to='/tictactoe'>틱텍토</Link></li>\r\n              <li><Link to='/googoodan'>구구단</Link></li>\r\n              <li><Link to='/mine'>지뢰찾기</Link></li>\r\n            </ul>\r\n          </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useCallback, useEffect, useRef, memo } from 'react';\r\nimport {clickCell, changeTurn} from './index'\r\n\r\nexport interface ITd {\r\n    rowIndex: number\r\n    cellIndex: number\r\n    dispatch: (obj:any) => void\r\n    cellData: string\r\n}\r\n\r\nconst Td = memo(({rowIndex, cellIndex, dispatch, cellData }:ITd) => {\r\n    console.log('td');\r\n\r\n    const ref = useRef<any>([]);\r\n    useEffect(() => {\r\n        console.log([rowIndex === ref.current[0], cellIndex === ref.current[1], dispatch === ref.current[2], cellData === ref.current[3]])\r\n        console.log(cellData);\r\n        ref.current = [rowIndex, cellIndex, dispatch, cellData]\r\n\r\n    },[rowIndex, cellIndex, dispatch, cellData])\r\n\r\n    const onClickTd = useCallback ( () => {\r\n        console.log('onClickTd', cellData);\r\n        if (cellData) {\r\n            return;\r\n        }\r\n        \r\n        dispatch(clickCell(rowIndex, cellIndex));\r\n\r\n    }, [cellData])\r\n\r\n    return (\r\n        <td onClick={onClickTd}>{cellData}</td>\r\n    )\r\n})\r\n\r\nexport default Td","import React, { Dispatch, useRef, useEffect, memo } from 'react';\r\nimport { IAction }from './index';\r\nimport Td from './Td';\r\n\r\ninterface ITr {\r\n    rowIndex: number\r\n    rowData: string[]\r\n    dispatch: Dispatch<IAction>\r\n}\r\nconst Tr = memo(({rowIndex, rowData, dispatch}:ITr) => {\r\n    console.log('tr render');\r\n\r\n    const ref = useRef<any>([]);\r\n    useEffect(() => {\r\n        console.log([rowIndex === ref.current[0], rowData === ref.current[1], dispatch === ref.current[2]]);\r\n        // console.log(cellData);\r\n        ref.current = [rowIndex, rowData, dispatch]\r\n\r\n    },[rowIndex, rowData, dispatch])\r\n    return (\r\n        <tr>\r\n            {\r\n                rowData.map((item, i) =><Td key={i} rowIndex={rowIndex} cellIndex={i} dispatch={dispatch} cellData={item}/>)\r\n            }\r\n        </tr>\r\n    )\r\n});\r\n\r\nexport default Tr;","import React, { Dispatch, memo } from 'react';\r\nimport { IAction }from './index';\r\nimport Tr from './Tr';\r\n\r\ninterface ITable {\r\n    onClick: () => void\r\n    tableData: string[][]\r\n    dispatch: Dispatch<IAction>\r\n}\r\nconst Table = memo(({onClick, tableData, dispatch}:ITable) => {\r\n\r\n    return (\r\n        <table>\r\n            <thead>\r\n\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    tableData.map((item, i) => <Tr key={i} rowIndex={i} rowData={item} dispatch={dispatch} />)\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n});\r\n\r\nexport default Table;","import React, { useReducer, useCallback, useEffect } from 'react';\r\nimport Table from './Table';\r\n\r\ntype IInitState = {\r\n    winner: string;\r\n    turn: string;\r\n    tableData: string[][];\r\n    recentCell: number[];\r\n}\r\nconst initialState:IInitState = {\r\n    winner: '',\r\n    turn: 'O',\r\n    tableData: [\r\n        ['', '', '',],\r\n        ['', '', '',],\r\n        ['', '', '',]\r\n    ],\r\n    recentCell: [-1, -1]\r\n}\r\nexport const SET_WINNER = 'SET_WINNER' as const;\r\nexport const CLICK_CELL = 'CLICK_CELL' as const;\r\nexport const CHANGE_TURN = 'CHANGE_TURN' as const;\r\nexport const RESET_GAME = 'RESET_GAME' as const;\r\n\r\nexport const setWinner = (payload:string) => {\r\n    return {\r\n        type:SET_WINNER,\r\n        payload: payload\r\n    }\r\n}\r\n\r\nexport const clickCell = (row:number, cell:number) => {\r\n    return {\r\n        type: CLICK_CELL,\r\n        row: row,\r\n        cell: cell\r\n    }\r\n}\r\n\r\nexport const changeTurn = () => {\r\n    return {\r\n        type: CHANGE_TURN\r\n    }\r\n}\r\n\r\nexport const resetGame = () => {\r\n    return {\r\n        type: RESET_GAME\r\n    }\r\n}\r\n\r\nexport type IAction = \r\n    ReturnType<typeof setWinner> |\r\n    ReturnType<typeof clickCell> |\r\n    ReturnType<typeof changeTurn> |\r\n    ReturnType<typeof resetGame>\r\n;\r\n\r\nconst reducer = (state: IInitState, action: IAction) => {\r\n    \r\n    switch(action.type) {\r\n        case SET_WINNER:\r\n            return {\r\n                ...state,\r\n                winner: action.payload\r\n            }\r\n        case CLICK_CELL:\r\n            const tableData = [...state.tableData];\r\n            tableData[action.row] = [...tableData[action.row]];\r\n            tableData[action.row][action.cell] = state.turn;\r\n            return {\r\n                ...state,\r\n                tableData,\r\n                recentCell: [action.row, action.cell]\r\n            }\r\n        case CHANGE_TURN:\r\n            return {\r\n                ...state,\r\n                turn: state.turn === 'O' ? \"X\" : \"O\"\r\n            }\r\n        case RESET_GAME:\r\n            return {\r\n                ...state,\r\n                turn: 'O',\r\n                tableData: [\r\n                    ['', '', '',],\r\n                    ['', '', '',],\r\n                    ['', '', '',]\r\n                ],\r\n                recentCell: [-1, -1]\r\n            } \r\n        default:\r\n            return state;\r\n    }\r\n}\r\nconst Tictactoe = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const {tableData, winner, recentCell, turn} = state;\r\n\r\n    useEffect(() => {\r\n        let win = false;\r\n        const [row, cell] = recentCell;\r\n        if (row < 0) {\r\n            return\r\n        }\r\n        if (tableData[row][0] === turn&& tableData[row][1] === turn && tableData[row][2] === turn) {\r\n            win = true;\r\n        }\r\n        if (tableData[0][cell] === turn&& tableData[1][cell] === turn && tableData[2][cell] === turn) {\r\n            win = true;\r\n        }\r\n        if (tableData[0][0] === turn&& tableData[1][1] === turn && tableData[2][2] === turn) {\r\n            win = true;\r\n        }\r\n        if (tableData[0][2] === turn&& tableData[1][1] === turn && tableData[2][0] === turn) {\r\n            win = true;\r\n        }\r\n\r\n        if (win) {\r\n            dispatch(setWinner(turn));\r\n            dispatch(resetGame());\r\n        } else {\r\n            let all = true;\r\n            tableData.forEach(row => {\r\n                row.forEach((cell => {\r\n                    if ( !cell ) {\r\n                        all = false\r\n                    }\r\n                }))\r\n            });\r\n\r\n            if (all) {\r\n                dispatch(resetGame());\r\n            } else {\r\n                dispatch(changeTurn())\r\n            }\r\n        }\r\n\r\n    },[recentCell])\r\n\r\n    // const onClickTable = useCallback(()=> {\r\n    //     dispatch({type:SET_WINNER, payload: '0'})\r\n    // },[]);\r\n\r\n    return(\r\n        <div className=\"TicTacToe\">\r\n            <Table onClick={()=>{}} tableData={tableData} dispatch={dispatch} />\r\n            {winner} 의 승리\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tictactoe;","import React from 'react';\r\n\r\nconst Googoodan = () => {\r\n\r\n    return(\r\n        <div>\r\n            구구단 이다\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Googoodan;","import React, { useContext, useCallback } from 'react';\r\nimport { TableContext, CODE, openCell, normalCell, flagCell, questionCell, clickMine } from '.';\r\n\r\ninterface ITd {\r\n    item: number;\r\n    rowIndex: number;\r\n    cellIndex: number;\r\n}\r\n\r\nconst getTdStyle = (code: CODE) => {\r\n    switch(code) {\r\n        case CODE.NORMAL:\r\n        case CODE.MINE:\r\n            return {\r\n                background: '#444'\r\n            }\r\n        case CODE.OPENED:\r\n            return {\r\n                background: 'white'\r\n            }\r\n        case CODE.FLAG_MINE:\r\n        case CODE.FLAG:\r\n            return {\r\n                background: 'red'\r\n            }\r\n        case CODE.QUESTION_MINE:\r\n        case CODE.QUESTION:\r\n            return {\r\n                background: 'blue'\r\n            }\r\n        default:\r\n            return {\r\n                background: 'white'\r\n            }\r\n    }\r\n}\r\n\r\nconst getTdText = (code: CODE) => {\r\n    switch(code) {\r\n        case CODE.NORMAL:\r\n            return '';\r\n        case CODE.MINE:\r\n            return 'X';\r\n        case CODE.CLICKED_MINE:\r\n            return '펑';\r\n        case CODE.FLAG_MINE:\r\n        case CODE.FLAG:\r\n            return '!';\r\n        case CODE.QUESTION_MINE:\r\n        case CODE.QUESTION:\r\n            return '?';\r\n        default: \r\n            return code || '';\r\n    }\r\n}\r\nconst Td = ({ item, rowIndex, cellIndex }:ITd) => {\r\n\r\n    const { dispatch, halted } = useContext(TableContext);\r\n\r\n\r\n    const onClickCell = useCallback(() => {\r\n        if (halted) {\r\n            return;\r\n        }\r\n        switch(item) {\r\n            case CODE.NORMAL:\r\n                dispatch(openCell(rowIndex, cellIndex));\r\n                return;\r\n            case CODE.MINE:\r\n                dispatch(clickMine(rowIndex, cellIndex));\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }, [item, halted]);\r\n\r\n    const onRightClick = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (halted) {\r\n            return;\r\n        }\r\n\r\n        switch(item) {\r\n            case CODE.NORMAL:\r\n            case CODE.MINE:\r\n                dispatch(normalCell(rowIndex,cellIndex))\r\n                return;\r\n            case CODE.FLAG:\r\n            case CODE.FLAG_MINE:\r\n                dispatch(flagCell(rowIndex,cellIndex))\r\n                return;\r\n            case CODE.QUESTION:\r\n            case CODE.QUESTION_MINE:\r\n                dispatch(questionCell(rowIndex,cellIndex))\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n\r\n    }, [item, halted]);\r\n    \r\n    return(\r\n        <td\r\n            style={getTdStyle(item)}\r\n            className=\"Td\"\r\n            onClick={onClickCell}\r\n            onContextMenu={onRightClick}\r\n        >\r\n            {getTdText(item)}\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default Td;","import React, { useContext } from 'react';\r\nimport Td from './Td';\r\nimport { TableContext } from '.';\r\n\r\ninterface ITr {\r\n    items: number[]\r\n    rowIndex: number\r\n}\r\nconst Tr = ({ items, rowIndex }: ITr) => {\r\n    const {tableData} = useContext(TableContext);\r\n\r\n    return (\r\n        <tr className=\"Tr\">\r\n            {\r\n                items.map((item, i) => <Td key={i} item={item} rowIndex={rowIndex} cellIndex={i}/> )\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Tr;","import React, { useContext } from 'react';\r\nimport { TableContext } from '.';\r\nimport Tr from './Tr';\r\n\r\nconst Table = () => {\r\n\r\n    const { tableData } = useContext(TableContext);\r\n    return(\r\n        <div className=\"Table\">\r\n            <table>\r\n                <thead></thead>\r\n                <tbody>\r\n                    {\r\n                        tableData.map((item, i) => ( <Tr key={i} items={item} rowIndex={i}/> ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useState, useCallback, useContext, useEffect } from 'react';\r\nimport { TableContext, startGame } from '.';\r\n\r\nconst Form = () => {\r\n\r\n    const [row, setRow] = useState<number>(-1);\r\n    const [cell, setCell] = useState<number>(-1);\r\n    const [mine, setMine] = useState<number>(-1);\r\n    const { dispatch } = useContext(TableContext);\r\n\r\n    const onChangeRow = useCallback( (e) => {\r\n        setRow(e.target.value);\r\n    }, []);\r\n    const onChangeCell = useCallback( (e) => {\r\n        setCell(e.target.value);\r\n    }, []);\r\n    const onChangeMine = useCallback( (e) => {\r\n        setMine(e.target.value);\r\n    }, []);\r\n    const onClickButon = useCallback(() => {\r\n        dispatch(startGame({row,cell,mine}));\r\n    }, [row, cell, mine]);\r\n\r\n    useEffect(() => {\r\n        setRow(10)\r\n        setCell(10)\r\n        setMine(10)\r\n        dispatch(startGame({row,cell,mine}));\r\n    }, [])\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"Form\">\r\n            <input type=\"number\" placeholder=\"세로\" value={row} onChange={onChangeRow} />\r\n            <input type=\"number\" placeholder=\"가로\" value={cell} onChange={onChangeCell} />\r\n            <input type=\"number\" placeholder=\"지뢰\" value={mine} onChange={onChangeMine} />\r\n            <button type=\"button\" onClick={onClickButon}>시작</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Tictactoe from './Tictactoe';\r\nimport Googoodan from './Googoodan';\r\nimport Mine from './Mine';\r\n\r\nconst Main = () => {\r\n\r\n    return (\r\n        <main className=\"App-main\">\r\n          <Switch>\r\n            <Route path=\"/tictactoe\" component={Tictactoe}></Route>\r\n            <Route path=\"/googoodan\" component={Googoodan}></Route>\r\n            <Route path=\"/Mine\" component={Mine}></Route>\r\n            <Route expact path=\"/\" component={Tictactoe}></Route>\r\n          </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport Header from 'components/Header';\r\nimport Main from 'components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Main />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'style/index.scss';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}