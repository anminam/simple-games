{"version":3,"sources":["components/Mine/index.tsx","components/Header/index.tsx","components/Tictactoe/Td.tsx","components/Tictactoe/Tr.tsx","components/Tictactoe/Table.tsx","components/Tictactoe/index.tsx","components/Googoodan/index.tsx","components/Mine/Td.tsx","components/Mine/Tr.tsx","components/Mine/Table.tsx","components/Mine/Form.tsx","components/Main.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CODE","Header","className","to","Td","memo","rowIndex","cellIndex","dispatch","cellData","console","log","ref","useRef","useEffect","current","onClickTd","useCallback","clickCell","onClick","Tr","rowData","map","item","i","key","Table","tableData","initialState","winner","turn","recentCell","row","cell","type","reducer","state","action","payload","Tictactoe","useReducer","win","all","forEach","Googoodan","getTdStyle","code","NORMAL","MINE","background","OPENED","FLAG_MINE","FLAG","QUESTION_MINE","QUESTION","useContext","TableContext","onClickCell","openCell","onRightClick","e","preventDefault","style","onContextMenu","CLICKED_MINE","getTdText","items","Form","useState","setRow","setCell","mine","setMine","onChangeRow","target","value","onChangeCell","onChangeMine","onClickButon","startGame","placeholder","onChange","planMine","candidate","Array","fill","shuffle","length","chosen","splice","Math","floor","random","push","data","j","k","ver","hor","timer","result","obj","createContext","Mine","useMemo","Provider","Main","path","component","expact","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ea830447.chunk.js","sourcesContent":["import React, { useReducer, createContext, useMemo } from 'react';\nimport Table from './Table';\nimport Form from './Form';\n\nexport enum CODE {\n  MINE,\n  NORMAL,\n  QUESTION,\n  FLAG,\n  QUESTION_MINE,\n  FLAG_MINE,\n  CLICKED_MINE,\n  OPENED,\n}\n\nexport interface IStartMine {\n  row: number\n  cell: number\n  mine: number\n}\n\nconst planMine = ({row, cell, mine}: IStartMine):number[][] => {\n  const candidate = Array(row * cell).fill('').map((item, i) => i)\n  const shuffle = [];\n  while(candidate.length > row * cell - mine) {\n    const chosen = candidate.splice(Math.floor(Math.random() * candidate.length), 1)[0];\n    shuffle.push(chosen);\n  }\n\n  const data = [];\n  for (let i =0; i< row; i++){\n    const rowData:number[] = [];\n    data.push(rowData);\n    for (let j = 0; j < row; j++){\n      rowData.push(CODE.NORMAL)\n    }\n  }\n\n  for (let k = 0; k < shuffle.length; k++) {\n    const ver = Math.floor(shuffle[k] / cell);\n    const hor = shuffle[k] % cell;\n    data[ver][hor] = CODE.MINE;\n  }\n\n  console.log(data);\n  return data;\n}\n\ninterface IState {\n  tableData: number[][]\n  timer: string,\n  result: string\n\n}\nconst initialState:IState = {\n  tableData: [[]],\n  timer: '',\n  result: ''\n}\n\nexport const START_GAME = 'START_GAME' as const;\nexport const OPEN_CELL = 'OPEN_CELL' as const;\n\nexport const startGame = ({row, cell, mine}: IStartMine) => (\n  {\n    type: START_GAME,\n    row,\n    cell,\n    mine\n  }\n)\n\nexport const openCell = (row:number, cell:number) => {\n  return {\n    type: OPEN_CELL,\n    row,\n    cell\n  }\n}\n\ntype IAction = \n  ReturnType<typeof startGame> |\n  ReturnType<typeof openCell>\n;\n\nconst reducer = (state:IState, action:IAction) => {\n  switch (action.type) {\n    case START_GAME:\n      const obj = {\n        row: action.row,\n        cell: action.cell,\n        mine: action.mine,\n      }\n      return {\n        ...state,\n        tableData: planMine(obj)\n      }\n    case OPEN_CELL:\n        const tableData = [...state.tableData];\n        tableData[action.row] = [...state.tableData[action.row]];\n        tableData[action.row][action.cell] = CODE.OPENED\n        return {\n          ...state,\n          tableData\n        }\n    default:\n      return state;\n  }\n}\n\nexport interface ITableContext {\n  tableData: number[][]\n  dispatch: React.Dispatch<IAction>\n}\n\nexport const TableContext = createContext<ITableContext>({\n  tableData: [[]],\n  dispatch: () => {}\n})\n\nconst Mine = () => {\n  \n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const value = useMemo( () => ({\n    tableData: state.tableData,\n    dispatch\n  }), [state.tableData])\n\n  return(\n    <TableContext.Provider value={value}>\n      <div className=\"Mine\">\n        <Form />\n        <div>{state.timer}</div>\n        {\n          state.tableData.length > 0 &&\n          <Table />\n        }\n        \n        <div>{state.timer}</div>\n\n\n      </div>\n    </TableContext.Provider>\n  )\n}\n\nexport default Mine;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => {\n\n    return(\n        <header className=\"App-header\">\n          <div className=\"title\">게임맨</div>\n          <nav>\n            <ul className=\"nav-list\">\n              <li><Link to='/tictactoe'>틱텍토</Link></li>\n              <li><Link to='/googoodan'>구구단</Link></li>\n              <li><Link to='/mine'>지뢰찾기</Link></li>\n            </ul>\n          </nav>\n        </header>\n    )\n}\n\nexport default Header;","import React, { useCallback, useEffect, useRef, memo } from 'react';\nimport {clickCell, changeTurn} from './index'\n\nexport interface ITd {\n    rowIndex: number\n    cellIndex: number\n    dispatch: (obj:any) => void\n    cellData: string\n}\n\nconst Td = memo(({rowIndex, cellIndex, dispatch, cellData }:ITd) => {\n    console.log('td');\n\n    const ref = useRef<any>([]);\n    useEffect(() => {\n        console.log([rowIndex === ref.current[0], cellIndex === ref.current[1], dispatch === ref.current[2], cellData === ref.current[3]])\n        console.log(cellData);\n        ref.current = [rowIndex, cellIndex, dispatch, cellData]\n\n    },[rowIndex, cellIndex, dispatch, cellData])\n\n    const onClickTd = useCallback ( () => {\n        console.log('onClickTd', cellData);\n        if (cellData) {\n            return;\n        }\n        \n        dispatch(clickCell(rowIndex, cellIndex));\n\n    }, [cellData])\n\n    return (\n        <td onClick={onClickTd}>{cellData}</td>\n    )\n})\n\nexport default Td","import React, { Dispatch, useRef, useEffect, memo } from 'react';\nimport { IAction }from './index';\nimport Td from './Td';\n\ninterface ITr {\n    rowIndex: number\n    rowData: string[]\n    dispatch: Dispatch<IAction>\n}\nconst Tr = memo(({rowIndex, rowData, dispatch}:ITr) => {\n    console.log('tr render');\n\n    const ref = useRef<any>([]);\n    useEffect(() => {\n        console.log([rowIndex === ref.current[0], rowData === ref.current[1], dispatch === ref.current[2]]);\n        // console.log(cellData);\n        ref.current = [rowIndex, rowData, dispatch]\n\n    },[rowIndex, rowData, dispatch])\n    return (\n        <tr>\n            {\n                rowData.map((item, i) =><Td key={i} rowIndex={rowIndex} cellIndex={i} dispatch={dispatch} cellData={item}/>)\n            }\n        </tr>\n    )\n});\n\nexport default Tr;","import React, { Dispatch, memo } from 'react';\nimport { IAction }from './index';\nimport Tr from './Tr';\n\ninterface ITable {\n    onClick: () => void\n    tableData: string[][]\n    dispatch: Dispatch<IAction>\n}\nconst Table = memo(({onClick, tableData, dispatch}:ITable) => {\n\n    return (\n        <table>\n            <thead>\n\n            </thead>\n            <tbody>\n                {\n                    tableData.map((item, i) => <Tr key={i} rowIndex={i} rowData={item} dispatch={dispatch} />)\n                }\n            </tbody>\n        </table>\n    )\n});\n\nexport default Table;","import React, { useReducer, useCallback, useEffect } from 'react';\nimport Table from './Table';\n\ntype IInitState = {\n    winner: string;\n    turn: string;\n    tableData: string[][];\n    recentCell: number[];\n}\nconst initialState:IInitState = {\n    winner: '',\n    turn: 'O',\n    tableData: [\n        ['', '', '',],\n        ['', '', '',],\n        ['', '', '',]\n    ],\n    recentCell: [-1, -1]\n}\nexport const SET_WINNER = 'SET_WINNER' as const;\nexport const CLICK_CELL = 'CLICK_CELL' as const;\nexport const CHANGE_TURN = 'CHANGE_TURN' as const;\nexport const RESET_GAME = 'RESET_GAME' as const;\n\nexport const setWinner = (payload:string) => {\n    return {\n        type:SET_WINNER,\n        payload: payload\n    }\n}\n\nexport const clickCell = (row:number, cell:number) => {\n    return {\n        type: CLICK_CELL,\n        row: row,\n        cell: cell\n    }\n}\n\nexport const changeTurn = () => {\n    return {\n        type: CHANGE_TURN\n    }\n}\n\nexport const resetGame = () => {\n    return {\n        type: RESET_GAME\n    }\n}\n\nexport type IAction = \n    ReturnType<typeof setWinner> |\n    ReturnType<typeof clickCell> |\n    ReturnType<typeof changeTurn> |\n    ReturnType<typeof resetGame>\n;\n\nconst reducer = (state: IInitState, action: IAction) => {\n    \n    switch(action.type) {\n        case SET_WINNER:\n            return {\n                ...state,\n                winner: action.payload\n            }\n        case CLICK_CELL:\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...tableData[action.row]];\n            tableData[action.row][action.cell] = state.turn;\n            return {\n                ...state,\n                tableData,\n                recentCell: [action.row, action.cell]\n            }\n        case CHANGE_TURN:\n            return {\n                ...state,\n                turn: state.turn === 'O' ? \"X\" : \"O\"\n            }\n        case RESET_GAME:\n            return {\n                ...state,\n                turn: 'O',\n                tableData: [\n                    ['', '', '',],\n                    ['', '', '',],\n                    ['', '', '',]\n                ],\n                recentCell: [-1, -1]\n            } \n        default:\n            return state;\n    }\n}\nconst Tictactoe = () => {\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const {tableData, winner, recentCell, turn} = state;\n\n    useEffect(() => {\n        let win = false;\n        const [row, cell] = recentCell;\n        if (row < 0) {\n            return\n        }\n        if (tableData[row][0] === turn&& tableData[row][1] === turn && tableData[row][2] === turn) {\n            win = true;\n        }\n        if (tableData[0][cell] === turn&& tableData[1][cell] === turn && tableData[2][cell] === turn) {\n            win = true;\n        }\n        if (tableData[0][0] === turn&& tableData[1][1] === turn && tableData[2][2] === turn) {\n            win = true;\n        }\n        if (tableData[0][2] === turn&& tableData[1][1] === turn && tableData[2][0] === turn) {\n            win = true;\n        }\n\n        if (win) {\n            dispatch(setWinner(turn));\n            dispatch(resetGame());\n        } else {\n            let all = true;\n            tableData.forEach(row => {\n                row.forEach((cell => {\n                    if ( !cell ) {\n                        all = false\n                    }\n                }))\n            });\n\n            if (all) {\n                dispatch(resetGame());\n            } else {\n                dispatch(changeTurn())\n            }\n        }\n\n    },[recentCell])\n\n    // const onClickTable = useCallback(()=> {\n    //     dispatch({type:SET_WINNER, payload: '0'})\n    // },[]);\n\n    return(\n        <div className=\"TicTacToe\">\n            <Table onClick={()=>{}} tableData={tableData} dispatch={dispatch} />\n            {winner} 의 승리\n        </div>\n    )\n}\n\nexport default Tictactoe;","import React from 'react';\n\nconst Googoodan = () => {\n\n    return(\n        <div>\n            구구단 이다\n        </div>\n    )\n}\n\nexport default Googoodan;","import React, { useContext, useCallback } from 'react';\nimport { TableContext, CODE, openCell } from '.';\n\ninterface ITd {\n    item: number;\n    rowIndex: number;\n    cellIndex: number;\n}\n\nconst getTdStyle = (code: CODE) => {\n    switch(code) {\n        case CODE.NORMAL:\n        case CODE.MINE:\n            return {\n                background: '#444'\n            }\n        case CODE.OPENED:\n            return {\n                background: 'white'\n            }\n        case CODE.FLAG_MINE:\n        case CODE.FLAG:\n            return {\n                background: 'red'\n            }\n        case CODE.QUESTION_MINE:\n        case CODE.QUESTION:\n            return {\n                background: 'blue'\n            }\n        default:\n            return {\n                background: 'white'\n            }\n    }\n}\n\nconst getTdText = (code: CODE) => {\n    switch(code) {\n        case CODE.NORMAL:\n            return '';\n        case CODE.MINE:\n            return 'X';\n        case CODE.CLICKED_MINE:\n            return '펑';\n        case CODE.FLAG_MINE:\n        case CODE.FLAG:\n            return '!';\n        case CODE.QUESTION_MINE:\n        case CODE.QUESTION:\n            return '?';\n        default: \n            return '';\n    }\n}\nconst Td = ({ item, rowIndex, cellIndex }:ITd) => {\n\n    const { dispatch } = useContext(TableContext);\n\n\n    const onClickCell = useCallback(() => {\n        switch(item) {\n            case CODE.NORMAL:\n                dispatch(openCell(rowIndex, cellIndex));\n                return;\n            case CODE.MINE:\n                dispatch(openCell(rowIndex, cellIndex));\n                return;\n            default:\n                return;\n        }\n\n    }, [item]);\n\n    const onRightClick = useCallback((e) => {\n        e.preventDefault();\n\n    },[]);\n    \n    return(\n        <td\n            style={getTdStyle(item)}\n            className=\"Td\"\n            onClick={onClickCell}\n            onContextMenu={onRightClick}\n        >\n            {getTdText(item)}\n        </td>\n    )\n}\n\nexport default Td;","import React, { useContext } from 'react';\nimport Td from './Td';\nimport { TableContext } from '.';\n\ninterface ITr {\n    items: number[]\n    rowIndex: number\n}\nconst Tr = ({ items, rowIndex }: ITr) => {\n    const {tableData} = useContext(TableContext);\n\n    return (\n        <tr className=\"Tr\">\n            {\n                items.map((item, i) => <Td key={i} item={item} rowIndex={rowIndex} cellIndex={i}/> )\n            }\n        </tr>\n    )\n}\n\nexport default Tr;","import React, { useContext } from 'react';\nimport { TableContext } from '.';\nimport Tr from './Tr';\n\nconst Table = () => {\n\n    const { tableData } = useContext(TableContext);\n    return(\n        <div className=\"Table\">\n            <table>\n                <thead></thead>\n                <tbody>\n                    {\n                        tableData.map((item, i) => ( <Tr key={i} items={item} rowIndex={i}/> ))\n                    }\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Table;","import React, { useState, useCallback, useContext } from 'react';\nimport { TableContext, startGame } from '.';\n\nconst Form = () => {\n\n    const [row, setRow] = useState<number>(-1);\n    const [cell, setCell] = useState<number>(-1);\n    const [mine, setMine] = useState<number>(-1);\n    const { dispatch } = useContext(TableContext);\n\n    const onChangeRow = useCallback( (e) => {\n        setRow(e.target.value);\n    }, []);\n    const onChangeCell = useCallback( (e) => {\n        setCell(e.target.value);\n    }, []);\n    const onChangeMine = useCallback( (e) => {\n        setMine(e.target.value);\n    }, []);\n    const onClickButon = useCallback(() => {\n        dispatch(startGame({row,cell,mine}));\n    }, [row, cell, mine]);\n    \n\n\n    return (\n        <div className=\"Form\">\n            <input type=\"number\" placeholder=\"세로\" value={row} onChange={onChangeRow} />\n            <input type=\"number\" placeholder=\"가로\" value={cell} onChange={onChangeCell} />\n            <input type=\"number\" placeholder=\"지뢰\" value={mine} onChange={onChangeMine} />\n            <button type=\"button\" onClick={onClickButon}>시작</button>\n\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Tictactoe from './Tictactoe';\nimport Googoodan from './Googoodan';\nimport Mine from './Mine';\n\nconst Main = () => {\n\n    return (\n        <main className=\"App-main\">\n          <Switch>\n            <Route path=\"/tictactoe\" component={Tictactoe}></Route>\n            <Route path=\"/googoodan\" component={Googoodan}></Route>\n            <Route path=\"/Mine\" component={Mine}></Route>\n            <Route expact path=\"/\" component={Tictactoe}></Route>\n          </Switch>\n        </main>\n    )\n}\n\nexport default Main;","import React from 'react';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Header from 'components/Header';\nimport Main from 'components/Main';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Header />\n        <Main />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'style/index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}